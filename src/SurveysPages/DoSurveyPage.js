/**
 * DO SURVEY: A page that allows the user to do and submit a survey. Contains:
 *  NotifyDisplay for validation
 *  GenerateSurvey component
 */

/* REACT IMPORTS */
import React from 'react';
/* THIRD PARTY IMPORTS */
import { withRouter } from 'react-router-dom';
import { 
    CircularProgress, 
    Button, 
} from '@material-ui/core';
import * as _ from 'lodash';
import { withSnackbar } from 'notistack';
/* LOCAL IMPORTS */
import { GenerateSurvey, NotifyDisplay } from '../_components';
import { apiCall } from '../_helpers';

class DoSurveyPage extends React.Component {

    state = {
        model: null,
        spinner: true,
        errors: null,
    }

    constructor() {
        super();
        this.errorsRef = React.createRef();
    }

    /**
     * When user attempts to submit the survey, get the survey model, submit it to the API.
     * If success, show snackBar and redirect back to surveys page. Otherwise, show validation
     * messages generated by error from API.
     */
    handleSubmitSurvey = () => {
        // Show spinner
        this.setState({spinner: true});
        const model = JSON.stringify(this.state.model);
        const { surveyId  } = this.props.match.params;
        apiCall(`/surveys/${surveyId}/submit/`, { method: 'POST', body: model }, false)
            .then(_ => {
                this.props.enqueueSnackbar('Survey submitted successfully!', {
                    action: key => <Button style={{color: 'white'}} onClick={() => this.props.closeSnackbar(key)}>Dismiss</Button>,
                });
                this.props.history.push('/program/surveys')
            })
            // Scroll the NotifyDisplay into view.
            .catch(error => this.setState({errors: error.data.errors, spinner: false}, () => {
                if(this.errorsRef.current) { 
                    this.errorsRef.current.scrollIntoView();
                }
            }));
    };

    /**
     * Helper function to generate error message nodes.
     * @param {*} errors - List of errors from API.
     */
    generateErrorMessages(errors) {
        const messages = [];
        _.forEach(errors, error => {
            messages.push(
                <span>
                    <b>Question {error.question_number ? error.question_number : '(unnumbered)'}:</b> {error.user_message}
                </span>
            );
        });
        return messages.length > 0 ? messages: null;
    }

    // When initially mounted, get the survey ID from the path and use it to get the survey model (needed to generate survey).
    componentDidMount() {
        const { surveyId  } = this.props.match.params;
        apiCall(`/surveys/${surveyId}/`, { method: 'GET'})
            .then(response => this.setState({model: response, spinner: false}));
    }


    render() {
        // Show spinner.
        if(this.state.spinner) {
            return <div className="progress-spinner-container"><CircularProgress size={100} /></div>
        }
        return (
            <React.Fragment>
                <NotifyDisplay 
                    header="Submission Error" 
                    items={this.generateErrorMessages(this.state.errors)}
                    itemsRef={this.errorsRef} />
                <GenerateSurvey 
                    model={this.state.model} 
                    submit={this.handleSubmitSurvey} />
            </React.Fragment>
        );
    }
}

const routedDoSurveyPage = withRouter(DoSurveyPage);
const snackedRoutedDoSurveyPage = withSnackbar(routedDoSurveyPage);
export { snackedRoutedDoSurveyPage as DoSurveyPage };
